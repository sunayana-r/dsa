let adj = [[1], [0, 2, 3], [1, 3, 4], [1, 2], [2, 5], [4]]
function DFSRecursive(adj, currentNode, visited, parent) {
    visited[currentNode] = true
    for(let j = 0; j < adj[currentNode].length; j++) {
        let adjacentNode = adj[currentNode][j]
        if (visited[adjacentNode] == false) {
            if (DFSRecursive(adj, adjacentNode, visited, currentNode) == true) return true
        } else if (adjacentNode != parent) {
            return true
        }
    }
}

function checkForCycles(adj) {
    let visited = new Array(adj.length).fill(false, 0, adj.length)
    for (let i = 0; i < adj.length; i++) {
        if(visited[i] == false) {
            if (DFSRecursive(adj, i, visited, -1) == true) return true
        }
    }
    return false
}
console.log(checkForCycles(adj))
